{"version":3,"sources":["components/Gem/styles.ts","components/Gem/index.tsx","components/Choices/styles.ts","components/Choices/index.tsx","components/Towers/styles.ts","components/Towers/Towers.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","span","props","color","Gem","type","index","handleClick","onClick","div","TypeContainer","types","Choices","map","key","Array","from","_","i","Row","TowerName","Combinations","towers","name","combination","StyledSpan","theme","includes","children","Towers","tower","comb","choices","App","useState","setChoices","useEffect","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8cAEO,IAAMA,EAAYC,IAAOC,KAAV,KAEA,SAACC,GAAD,MACF,MAAhBA,EAAMC,MACF,OACgB,MAAhBD,EAAMC,MACN,SACgB,MAAhBD,EAAMC,MACN,OACgB,MAAhBD,EAAMC,MACN,MACgB,MAAhBD,EAAMC,MACN,SACgB,MAAhBD,EAAMC,MACN,QACgB,MAAhBD,EAAMC,MACN,OACA,WCPOC,EATH,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAC1B,OACE,kBAACR,EAAD,CACEI,MAAOE,EACPG,QAAS,kBAAMD,EAAYF,EAAMC,KAFnC,UAGKD,GAHL,OAGYC,K,+TCNT,IAAMP,EAAYC,IAAOS,IAAV,KASTC,EAAgBV,IAAOS,IAAV,KCPpBE,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAuBnCC,EArBC,SAACV,GACf,OACE,oCACE,kBAAC,EAAD,KACGS,EAAME,KAAI,SAACR,GAAD,OACT,kBAACK,EAAD,CAAeP,MAAOE,EAAMS,IAAKT,GAC9BU,MAAMC,KAAKD,MAAM,IAAI,SAACE,EAAGC,GAAJ,OAAUA,EAAI,KAAGL,KAAI,SAACP,GAAD,OACzC,kBAAC,EAAD,CACEQ,IAAKT,EAAOC,EACZD,KAAMA,EACNC,MAAOA,EACPC,YAAa,kBAAML,EAAMK,YAAYF,EAAMC,gB,mlBCfpD,IAAMP,EAAYC,IAAOS,IAAV,KAcTU,EAAMnB,IAAOS,IAAV,KAKHW,EAAYpB,IAAOS,IAAV,KAKTY,EAAerB,IAAOS,IAAV,K,sGCtBzB,IAAMa,EAAS,CACb,CACEC,KAAM,SACNC,YAAa,CAAC,KAAM,KAAM,OAE5B,CACED,KAAM,eACNC,YAAa,CAAC,KAAM,KAAM,OAE5B,CACED,KAAM,qBACNC,YAAa,CAAC,KAAM,KAAM,KAAM,KAAM,QAIpCC,EAAazB,IAAOC,KAAV,KAEV,SAACC,GACD,OAAOA,EAAMwB,MAAMC,SAASzB,EAAM0B,UAAY,QAAU,iBAuB/CC,EAnBA,SAAC3B,GACd,OACE,kBAAC,EAAD,KACGoB,EAAOT,KAAI,SAACiB,GAAD,OACV,kBAACX,EAAD,CAAKL,IAAKgB,EAAMP,MACd,kBAACH,EAAD,KAAYU,EAAMP,MAClB,kBAACF,EAAD,KACGS,EAAMN,YAAYX,KAAI,SAACkB,GAAD,OACrB,kBAACN,EAAD,CAAYC,MAAOxB,EAAM8B,QAASlB,IAAKiB,GACpCA,aCJFE,MAzBf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNF,EADM,KACGG,EADH,KAiBb,OAbAC,qBAAU,WACRC,QAAQC,IAAI,CAAEN,cAMb,CAACA,IAOF,6BACE,kBAAC,EAAD,CAASzB,YANO,SAACF,EAAMC,GACzB6B,EAAW,GAAD,mBAAKH,GAAL,CAAc3B,EAAOC,QAM7B,kBAAC,EAAD,CAAQ0B,QAASA,M,MCdHO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.26ca66f9.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.span`\n  border-radius: 50%;\n  background-color: ${(props) =>\n    props.color === \"B\"\n      ? \"blue\"\n      : props.color === \"Y\"\n      ? \"orange\"\n      : props.color === \"Q\"\n      ? \"pink\"\n      : props.color === \"R\"\n      ? \"red\"\n      : props.color === \"E\"\n      ? \"purple\"\n      : props.color === \"G\"\n      ? \"green\"\n      : props.color === \"D\"\n      ? \"gold\"\n      : \"brown\"};\n  color: white;\n  padding: 10px;\n  margin: 2px;\n  width: 100px;\n  font-weight: 300;\n  cursor: pointer;\n`;\n","import React from \"react\";\nimport { Container } from \"./styles\";\n\nconst Gem = ({ type, index, handleClick }) => {\n  return (\n    <Container\n      color={type}\n      onClick={() => handleClick(type, index)}\n    >{`${type}${index}`}</Container>\n  );\n};\n\nexport default Gem;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 10px;\n  margin: 20px;\n  width: 100px;\n`;\n\nexport const TypeContainer = styled.div`\n  padding: 10px;\n  margin: 10px;\n  width: 100px;\n`;\n","import React from \"react\";\nimport Gem from \"../Gem\";\nimport { Container, TypeContainer } from \"./styles\";\n\nconst types = [\"B\", \"Y\", \"Q\", \"R\", \"E\", \"P\", \"G\", \"D\"];\n\nconst Choices = (props) => {\n  return (\n    <>\n      <Container>\n        {types.map((type) => (\n          <TypeContainer color={type} key={type}>\n            {Array.from(Array(6), (_, i) => i + 1).map((index) => (\n              <Gem\n                key={type + index}\n                type={type}\n                index={index}\n                handleClick={() => props.handleClick(type, index)}\n              />\n            ))}\n          </TypeContainer>\n        ))}\n      </Container>\n    </>\n  );\n};\n\nexport default Choices;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    margin-right: 10px;\n  }\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  width: 400px;\n`;\n\nexport const TowerName = styled.div`\n  width: 50%;\n  text-align: center;\n`;\n\nexport const Combinations = styled.div`\n  width: 50%;\n  text-align: center;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Combinations, Container, Row, TowerName } from \"./styles\";\n\nconst towers = [\n  {\n    name: \"Silver\",\n    combination: [\"B1\", \"Y1\", \"D1\"],\n  },\n  {\n    name: \"Pink Diamond\",\n    combination: [\"D5\", \"Y3\", \"D3\"],\n  },\n  {\n    name: \"Koh-i-noor Diamond\",\n    combination: [\"P1\", \"P2\", \"P3\", \"P4\", \"P5\"],\n  },\n];\n\nconst StyledSpan = styled.span`\n  border: 1px solid\n    ${(props) => {\n      return props.theme.includes(props.children) ? \"green\" : \"transparent\";\n    }};\n`;\n\nconst Towers = (props) => {\n  return (\n    <Container>\n      {towers.map((tower) => (\n        <Row key={tower.name}>\n          <TowerName>{tower.name}</TowerName>\n          <Combinations>\n            {tower.combination.map((comb) => (\n              <StyledSpan theme={props.choices} key={comb}>\n                {comb}\n              </StyledSpan>\n            ))}\n          </Combinations>\n        </Row>\n      ))}\n    </Container>\n  );\n};\n\nexport default Towers;\n","import React, { useEffect, useState } from \"react\";\nimport Choices from \"./components/Choices\";\nimport Towers from \"./components/Towers/Towers\";\n\nlet checker = (arr, target) => target.every((v) => arr.includes(v));\n\nfunction App() {\n  const [choices, setChoices] = useState([]);\n  // const [availableTowers, setAvailableTowers] = useState(towers);\n\n  useEffect(() => {\n    console.log({ choices });\n    // const filteredTowers = availableTowers.filter((tower) => {\n    //   const result = checker(tower.combination, choices);\n    //   return result;\n    // });\n    // console.log({ filteredTowers });\n  }, [choices]);\n\n  const handleClick = (type, index) => {\n    setChoices([...choices, type + index]);\n  };\n\n  return (\n    <div>\n      <Choices handleClick={handleClick} />\n      <Towers choices={choices} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}