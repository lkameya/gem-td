{"version":3,"sources":["components/Gem/styles.ts","components/Gem/index.tsx","components/Choices/styles.ts","components/Choices/index.tsx","components/Tower/styles.ts","components/Tower/index.tsx","components/Towers/styles.ts","components/Towers/Towers.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colorize","type","color","Container","styled","div","props","theme","includes","children","toString","split","Gem","index","handleClick","choices","onClick","TypeContainer","types","Choices","map","key","Array","from","_","i","Row","TowerName","Combinations","StyledSpan","span","Tower","tower","console","log","possibleToBuild","length","combination","filter","x","showTower","name","comb","Towers","towers","data","points","App","useState","setChoices","setTowers","useEffect","orderedByPoints","sort","a","b","prev","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dd081b42.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst colorize = (type) => {\n  let color = \"\";\n  switch (type) {\n    case \"B\":\n      color = \"#0069c0\";\n      break;\n    case \"Y\":\n      color = \"#ffa726\";\n      break;\n    case \"Q\":\n      color = \"#f06292\";\n      break;\n    case \"R\":\n      color = \"#ba000d\";\n      break;\n    case \"E\":\n      color = \"#8e24aa\";\n      break;\n    case \"G\":\n      color = \"#087f23\";\n      break;\n    case \"D\":\n      color = \"#fbc02d\";\n      break;\n    default:\n      color = \"#6d4c41\";\n  }\n\n  return color;\n};\n\nexport const Container = styled.div`\n  outline: none;\n  border-radius: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #222;\n\n  ${(props) =>\n    props.theme.includes(props.children) &&\n    `background-color: ${colorize(\n      props.children.toString().split(\"\")[0]\n    )};color: white`};\n\n  border: 2px solid ${(props) => colorize(props.color)};\n\n  padding: 10px;\n  margin: 2px;\n  width: 18px;\n  font-weight: 500;\n  cursor: pointer;\n  text-align: center;\n`;\n","import React from \"react\";\nimport { Container } from \"./styles\";\n\nconst Gem = ({ type, index, handleClick, choices }) => {\n  return (\n    <Container\n      color={type}\n      theme={choices}\n      onClick={() => handleClick(type, index)}\n    >{`${type}${index}`}</Container>\n  );\n};\n\nexport default Gem;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-bottom: 20px;\n`;\n\nexport const TypeContainer = styled.div`\n  display: flex;\n`;\n","import React from \"react\";\nimport Gem from \"../Gem\";\nimport { Container, TypeContainer } from \"./styles\";\n\nconst types = [\"B\", \"Y\", \"Q\", \"R\", \"E\", \"P\", \"G\", \"D\"];\n\nconst Choices = (props) => {\n  return (\n    <Container>\n      {types.map((type) => (\n        <TypeContainer color={type} key={type}>\n          {Array.from(Array(6), (_, i) => i + 1).map((index) => (\n            <Gem\n              key={type + index}\n              type={type}\n              index={index}\n              choices={props.choices}\n              handleClick={() => props.handleClick(type, index)}\n            />\n          ))}\n        </TypeContainer>\n      ))}\n    </Container>\n  );\n};\n\nexport default Choices;\n","import styled from \"styled-components\";\n\nexport const Row = styled.div`\n  display: flex;\n  width: 400px;\n`;\n\nexport const TowerName = styled.div`\n  width: 50%;\n  text-align: center;\n`;\n\nexport const Combinations = styled.div`\n  width: 50%;\n  text-align: center;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Combinations, Row, TowerName } from \"./styles\";\n\nconst StyledSpan = styled.span`\n  color: ${(props) => {\n    return props.theme.includes(props.children) ? \"#00701a\" : \"black\";\n  }};\n  font-weight: ${(props) => {\n    return props.theme.includes(props.children) ? \"900\" : \"300\";\n  }};\n  margin-left: 5px;\n`;\n\nconst showTower = (tower, choices) => {\n  console.log({ tower });\n  const choicesLeft = 5 - choices.length;\n  const countNotMatch = tower.combination.filter((x) => !choices.includes(x))\n    .length;\n  const possibleToBuild = choicesLeft - countNotMatch >= 0;\n  console.log({ possibleToBuild });\n  return possibleToBuild;\n};\n\nconst Tower = ({ tower, choices }) => {\n  return (\n    showTower(tower, choices) && (\n      <Row key={tower.name}>\n        <TowerName>{tower.name}</TowerName>\n        <Combinations>\n          {tower.combination.map((comb) => (\n            <StyledSpan theme={choices} key={comb}>\n              {comb}\n            </StyledSpan>\n          ))}\n        </Combinations>\n      </Row>\n    )\n  );\n};\n\nexport default Tower;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    margin-right: 10px;\n  }\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  width: 400px;\n`;\n\nexport const TowerName = styled.div`\n  width: 50%;\n  text-align: center;\n`;\n\nexport const Combinations = styled.div`\n  width: 50%;\n  text-align: center;\n`;\n","import React from \"react\";\nimport Tower from \"../Tower\";\nimport { Container } from \"./styles\";\n\nconst Towers = (props) => {\n  return (\n    <Container>\n      {props.towers.map((tower) => (\n        <Tower tower={tower} choices={props.choices} key={tower.name} />\n      ))}\n    </Container>\n  );\n};\n\nexport default Towers;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Choices from \"./components/Choices\";\nimport Towers from \"./components/Towers/Towers\";\n\nconst data = [\n  {\n    name: \"Silver\",\n    combination: [\"B1\", \"Y1\", \"D1\"],\n    points: 0,\n  },\n  {\n    name: \"Pink Diamond\",\n    combination: [\"D5\", \"Y3\", \"D3\"],\n    points: 0,\n  },\n  {\n    name: \"Koh-i-noor Diamond\",\n    combination: [\"P1\", \"P2\", \"P3\", \"P4\", \"P5\"],\n    points: 0,\n  },\n];\n\nconst Container = styled.div`\n  padding: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nfunction App() {\n  const [choices, setChoices] = useState([]);\n  const [towers, setTowers] = useState(data);\n\n  useEffect(() => {\n    console.log(\"RODEI\");\n    const orderedByPoints = towers.sort((a, b) => b.points - a.points);\n    setTowers(orderedByPoints);\n  }, [choices, towers]);\n\n  const handleClick = (type, index) => {\n    if (choices.length < 5 && !choices.includes(type + index)) {\n      setChoices([...choices, type + index]);\n      // const towerIndex = towers.findIndex((x) => x.name === type + index);\n      // const tower = towers.find(x => x.name === type+index);\n      // setTowers(newValues);\n    }\n    if (choices.includes(type + index)) {\n      setChoices((prev) => prev.filter((x) => x !== type + index));\n    }\n  };\n\n  return (\n    <Container>\n      <Choices handleClick={handleClick} choices={choices} />\n      <Towers towers={towers} choices={choices} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}